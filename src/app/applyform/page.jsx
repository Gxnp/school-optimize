"use client";

import { useRouter } from "next/navigation";
import { useForm, FormProvider } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import { stepOneSchema, stepTwoSchema } from "@/lib/validationSchema";
import toast, { Toaster } from "react-hot-toast";
import StepOne from "@/components/stepone";
import StepTwo from "@/components/steptwo";
import { useState } from "react";

export default function ApplyForm() {
  const [step, setStep] = useState(1);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const router = useRouter(); // ‡πÉ‡∏ä‡πâ router

  const schema = step === 1 ? stepOneSchema : stepTwoSchema;

  // üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á useForm ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ step ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ key
  const methods = useForm({
    resolver: yupResolver(schema),
    mode: "onBlur",
  });

  const onSubmit = async (data) => {
    setIsSubmitting(true);

    const orderedData = {
      title: data.title,
      name: data.fullName, // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ key ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö schema
      nationalId: data.nationalId,
      dob: data.dateOfBirth,
      age: data.age.toString(), // ‚úÖ Prisma ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô String
      religion: data.religion,
      ethnicity: data.ethnicity,
      nationality: data.nationality,
      phone: data.phone,
      address: data.address,
      previousSchool: data.graduatedSchool,
      gpa: data.gpa.toString(), // ‚úÖ Prisma ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô String
      gradeApplyingFor: data.desiredProgram,
      profilePicture: "", // ‡πÉ‡∏™‡πà default ‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    };

    try {
      console.log("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å form ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", methods.getValues());
      console.log("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß:", orderedData);

      await new Promise((res) => setTimeout(res, 2000)); // ‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á
      console.log("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á:", orderedData);

      const response = await fetch("/api/apply", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(orderedData),
      });

      const result = await response.json();

      if (response.ok) {
        toast.success("‡∏™‡πà‡∏á‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ /
        setTimeout(() => {
          router.push("/"); // ‡πÉ‡∏ä‡πâ router.push ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ /
        }, 1000);
        console.log("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á:", orderedData);
      } else {
        // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
        toast.error(result.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î else");
      }
    } catch (err) {
      console.error(err);
      toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î catch");
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleNext = async () => {
    const isValid = await methods.trigger(); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô step
    if (isValid) {
      setStep((prev) => prev + 1);
    }
  };

  const handleBack = () => {
    if (step > 1) {
      setStep((prev) => prev - 1);
    }
  };

  return (
    <div className="bg-gradient-to-b from-blue-50 to-white ">
      <FormProvider {...methods}>
        <form
          key={step} // ‚úÖ ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô step ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ resolver ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
          onSubmit={methods.handleSubmit(onSubmit)}
          className="max-w-xl mx-auto p-4 space-y-6 "
        >
          {step === 1 && <StepOne />}
          {step === 2 && <StepTwo />}

          <div className="flex justify-between">
            <button
              type="button"
              onClick={handleBack}
              className="bg-gray-300 text-black px-6 py-2 rounded disabled:opacity-60"
              disabled={step === 1}
            >
              ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            </button>

            {step === 1 ? (
              <button
                type="button"
                onClick={handleNext}
                className={`bg-blue-500 text-white px-6 py-2 rounded ${
                  isSubmitting ? "opacity-60 cursor-not-allowed" : ""
                }`}
                disabled={isSubmitting}
              >
                ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
              </button>
            ) : (
              <button
                type="submit"
                className="bg-blue-500 text-white px-6 py-2 rounded disabled:opacity-60"
                disabled={isSubmitting}
              >
                {isSubmitting ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á..." : "‡∏™‡πà‡∏á‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£"}
              </button>
            )}
          </div>

          <Toaster position="top-center" />
        </form>
      </FormProvider>
    </div>
  );
}
